{
  "name": "bio-pv",
  "version": "1.9.0-dev",
  "description": "WebGL protein viewer ",
  "homepage": "https://github.com/biasmv/pv",
  "author": {
    "name": "Marco Biasini"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/biasmv/pv.git"
  },
  "bugs": {
    "url": "https://github.com/biasmv/pv/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/biasmv/pv/blob/master/LICENSE.txt"
    }
  ],
  "main": "bio-pv.js",
  "devDependencies": {
    "grunt": "~0.4.5",
    "grunt-contrib-concat": "~0.3.0",
    "grunt-contrib-jshint": "~0.6.3",
    "grunt-contrib-uglify": "~0.2.2",
    "grunt-remove-logging": "~0.2.0",
    "grunt-contrib-requirejs": "~0.4.4",
    "mkdirp": "^0.5.0",
    "amdclean": "~2.4.0"
  },
  "optionalDependencies": {
    "browserify": "^9.0.8",
    "sniper": "^0.2.16"
  },
  "sniper": {
    "js": [
      "/js/bio-pv.browserify.js"
    ],
    "buildJS": [],
    "first": "simple",
    "snippets": [
      "snippets"
    ]
  },
  "scripts": {
    "prepublish": "scripts/make.sh",
    "build-biojs": "browserify -r ./:bio-pv > js/bio-pv.browserify.js"
  },
  "files": [
    "README.md",
    "bio-pv.js",
    "bio-pv.min.js",
    "bower.json",
    "LICENSE.txt",
    "snippets",
    "pdbs",
    "js/jquery-2.0.2.min.js",
    "js/jquery-ui.min.js",
    "js/bio-pv.browserify.js",
    "js/modernizr-2.8.3.min.js",
    "foundation-5.4.7.min.js",
    "package.json"
  ],
  "keywords": [
    "protein",
    "3d",
    "webgl",
    "biojs"
  ],
  "gitHead": "a653d6356f53a39fc55e0bfc635c9b45376b6d89",
  "readme": "pv - WebGL protein viewer\n=========================================\n\n`pv`  is a WebGL-based protein viewer whose goal is to once-for-all end the reign of Java applets on websites that require visualisation of protein structures. It's not you Java, it's all the annoying security popups and slow loading times. `pv` implements all major render modes that you would expect, and supports custom color schemes. \n\nBecause there is nothing worse than an unresponsive website, `pv` has been implemented with maximum performance in mind. Even very large macromolecules can be visualised at interactive framerates.\n\nProject Status\n-----------------------------------------\n\nThis project is currently in maintenance mode. I simply just don't have the time to work on it anymore. I'm happy to fix smaller bugs and answer support requests, though it might take a while until I can answer those.\n\nTrying it out\n-----------------------------------------\n\nYou can try the [online demo](http://biasmv.github.io/pv/demo.html) or run it locally on your computer.\n\nClone this repository\n\n```bash\ngit clone https://github.com/biasmv/pv.git\n```\n\nChange to the `pv` directory and serve the files using the serve script in the source directory. This will start a simple static-file server using Python's SimpleHTTPServer module.\n\n```bash\ncd pv\n./serve \n```\n\nOpen a WebGL-enabled web browser and visit http://localhost:8000\n\nWant to use PV on your website?\n----------------------------------------\n\nI would love you to! Most features you would expect from a protein viewer are already present and working. One considerations is important though:\n\n * WebGL is only supported in a subset of browsers. If you can afford to lose users of IE and older versions of browsers, `pv` is a good solution for protein visualisation.\n\nCiting PV?\n----------------------------------------\n\nI'm planning on writing a small application note, but in the mean time, use the following DOI for citing PV in your work.\n\n[![DOI](https://zenodo.org/badge/doi/10.5281/zenodo.20980.svg)](http://dx.doi.org/10.5281/zenodo.20980)\n\n\n\nContributing\n-----------------------------------------\n\nContributions of any kind (bugfixes, documentation, new features, etc.) are more than welcome. Just file bugs or open a pull request. Before submitting pull requests, please make sure to follow these [guide-lines](http://pv.readthedocs.io/en/v1.8.1/developer.html).\n\n\nAcknowledgements\n----------------------------------------\n\nPV uses the amazing [gl-matrix](https://github.com/toji/gl-matrix) JavaScript library for matrix and vector operations.\n\n\nThanks to @Traksewt, @kozmad, @greenify for their contributions\n\nDocumentation\n---------------------------------------\n\nDocumentation for `pv` is available [here](http://pv.readthedocs.org). \n\nChangelog\n----------------------------------------\n\n# New since latest release\n\n- Added experimental viewpointChanged event to viewer that allows to synchronize the orientation of two viewers.\n- Inverted color of rainbow gradient.\n- Add missing prop implementation for atom view.\n- Add very basic extension/plugin mechanism.\n- Getters for getting rotation/center.\n- Add a billboard-based sphere shader. This improves rendering speed when rendering whole structures using spheres. They also look much smoother.\n- Objects with an opacity of 0 can no longer be picked.\n- Support pan by middle-click.\n\n# New in Version 1.8.1\n\n- A few additional improvements to outline rendering quality\n- Made a few tweaks to documentation\n\n# New in Version 1.8.0\n\n- Implement screen-door transparency as an alternative to alpha-based transparency. To enable screen-door transparency, pass transparency : 'screendoor' when constructing the viewer.\n- Added special selection highlighting render mode.\n- Improve handling of click event by only firing click events when the mouse button is pressed/released within a short timespan.\n- Improve rendering of outline by properly scaling the extrusion factor based on the size of the GL canvas.\n- Added more sample code to documentation\n\n# New in Version 1.7.2\n\n- Made a few changes to the samples contained in the docs that don't work for some people. There is no functionality change on the code-level, that's why there is no 1.7.2 release.\n\n# New in Version 1.7.1\n\n- Added bower.json to release package so people can install PV using bower. This only works for release packages, but not the git repository itself.\n\n### New in Version 1.7.0\n\n- PDB import: Improved code to guess element from atom name. This fixes issues in correctly detecting hydrogen atoms for some cases.\n- Add support for click events on custom meshes\n- Deprecated atomDoubleClick/atomClick events in favor of click/doubleClicked to make it clearer that the target of the click event might be objects other than atoms. \n- Simplified the picking results object. The picking results now provides the position of the clicked object as the ```pos()``` property. It is no longer required to transform the atom position by the symmetry transformation matrix when displaying biological units.\n- Support for loading multi-model pdb files.\n- Added functionality to superpose two structures using least-square fitting\n\n### New in Version 1.6.0\n\n- Added option to set field of view (FOV)\n- Added \"points\" rendering mode in which every atom is rendered as a point. This is useful for rendering point clouds.\n- Get BioJS snippets working again (@greenify)\n\n### New in Version 1.5.0\n\n- Added Viewer.spin command to spin the camera around an axis\n- Relax some limits on number of elements that could be rendered at full connectivity level. Now it would theoretically be possible to render 2^24 atoms, even though the amount of geometry is likely to take down the browser.\n- Fix rendering for very long RNA molecules that broke some assumptions in the cartoon rendering code (1J5E, for example see issue [#82](https://github.com/biasmv/pv/issues/82)).\n- Improve heuristics to determine whether two residues belong to the same trace by not introducing trace breaks in case the residues are connected by a bond. This allows users to manually set bonds in case they have other means of knowing that two residues are to part of the same trace ([#83](https://github.com/biasmv/pv/issues/83)).\n\n### New in Version 1.4.0\n\n- Basic support RNA/DNA rendering for all render modes\n- Multi-touch support for iOS and Android (with contributions by @kozmad, @lordvlad)\n- improved visual clarity of text labels\n- use correct line width when manual anti-aliasing is enabled.\n- text labels can now be styled (color, font-family, font-weight, size)\n- reduced file size of minified JavaScript file by a little more than 10%\n- ability to add geometric shapes to the 3D scene through customMesh\n- ability to specify custom color palettes (@andreasprlic)\n- viewerReady event (@andreasprlic)\n- PV can optionally be used as an AMD module without polluting the global namespace\n- added more unit and functional tests. The tests reach a coverage of 80% of the total number of exectuable lines of code.\n- support for loading small molecules from SDF files\n\n### New in Version 1.3.1\n\n- fix bug in strand smoothing which would cause residues at the beginning of the trace to get collapsed.\n- rendering: check for null slab object to allow drawing to work when no objects are visible.\n\n### New in Version 1.3\n\n- publish it as an npm module\n- PDB IO: parse insertion codes\n- add method to retrieve current color of atom. This is useful for highlighting purposes, where the color of certain atoms is temporarily changed and then reverted back to the original.\n- smoothing of strands when rendering as helix, strand, coil cartoon\n- implement proper strand \"arrows\"\n- improved auto-slabbing when the rendered objects are off-center\n\n### New in Version 1.2\n\n- add transparancy support to mesh and line geoms (@kozmad)\n- substantial speed improvements through implementation of buffer pool for typed arrays.\n- method to assign secondary structure based on carbon-alpha positions\n- improved documentation\n- improve dictionary selection\n- support for adding text labels to the 3D scene\n- autoZoom to fit structure into viewport\n- work around uint16 buffer limit of WebGL by automatically splitting the geometry of large molecules into multiple buffers\n- support for different color notations, e.g. hex, color names.\n- support for displaying molecular assemblies, including support for picking of symmetry-related copies\n- implement different slab-modes\n- rudimentary support for rendering MSMS surfaces in the browser. Requires conversion to binary format first.\n- adding customisable animation time (@Traksewt)\n- add customizable atom picking events (double and single click) (@Traksewt)\n- improved animation support (@Traksewt)\n- customizable background color (@Traksewt)\n\n",
  "readmeFilename": "README.md",
  "dependencies": {
    "browserify": "^9.0.8",
    "sniper": "^0.2.16"
  },
  "_id": "bio-pv@1.9.0-dev",
  "_shasum": "0b1e28e621200df7581ffb32a11b16263b7a74e6",
  "_from": "biasmv/pv",
  "_resolved": "git://github.com/biasmv/pv.git#a653d6356f53a39fc55e0bfc635c9b45376b6d89"
}
