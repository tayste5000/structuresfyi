{
  "name": "ng-simpledb",
  "version": "0.2.0",
  "description": "Simple angular module for building mock backends",
  "main": "dist/ng-simpledb.js",
  "typings": "dist/index.d.ts",
  "scripts": {
    "test": "mocha --compilers ts:ts-node/register ./lib/**/*.spec.ts",
    "test:watch": "npm run test -- --watch"
  },
  "keywords": [
    "angular",
    "mock"
  ],
  "author": {
    "name": "tayste5000@gmail.com"
  },
  "license": "MIT",
  "devDependencies": {
    "chai": "^3.5.0",
    "mocha": "^2.5.3",
    "ts-loader": "^0.8.2",
    "ts-node": "^1.0.0",
    "typescript": "^1.8.10",
    "webpack": "^1.13.1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tayste5000/ng-simple-db.git"
  },
  "dependencies": {
    "angular": "^1.5.7",
    "angular-mocks": "^1.5.7",
    "lodash": "^4.13.1",
    "path-to-regexp": "^1.5.3"
  },
  "gitHead": "8f5545f40b8076d3a0a7386507b34fa7401a8ceb",
  "readme": "# ngSimpleDB\n\nA small module for easily building a fake backend into an angular application. Written with typescript.\n\n**To install:**\n#\n`npm install ng-simpledb`\n#\n**Dependencies:**\n+ AngularJS\n+ ngMock\n\n### How it works:\n+ In the config block:\n    + Specify the API base URL (defaults to /api/)\n    + Set an API delay (default is no delay)\n    + Supply mock data\n    + Build mock endpoints using the mock data\n+ In the run block:\n    + Trigger the setup function to build the backend\n+ What you get:\n    + Using the $http service (or anything that uses this), any HTTP request which matches one of the routes specified will perform the corresponding operation (using the array you supplied with route name as a data store)\n\n# API\n\n## Resource\n\nData wrapper for your object that adds simple CRUD methods to it.\nIs accessed inside of the endpoint functions.\n\n### Resource.read()\n\nFetch all data from a resource\n\n### Resource.create(data)\n\nCreate a new resource (adds 'id' parameter)\n\n### Resource.update(data)\n\nReplace entry with a matching 'id' parameter.\n\n### Resource.destroy(id)\n\nReplace entry with a matching 'id' parameter.\n\n## ngSimpleStoreProvider\n\nConfigure the fake backend\n\n### ngSimpleStoreProvider.apiUrl\n\nSets the base url of the api\n\n### ngSimpleStoreProvider.setDelay(delay, $provide)\n\nSet a universal API delay.\n\n### ngSimpleStoreProvider.addResource(name, resourceList)\n\nAdd a mock resource.\n\n+ resourceList  - An arbitrary collection (array of objects)\n\n### ngSimpleStoreProvider.addEndpoint(method, url, resources, endpoint)\n\nAdd a mock endpoint.\n\n+ Resources - Names of resources to load into endpoint function\n+ Endpoint - function with the call signature (resources, data, parameters)\nreturning an array of the form [status, data, headers] which is expected\nby ngMocks\n\n### ngSimpleStoreProvider.templates\n\nContains a set of shortcut endpoint functions.\n\n### ngSimpleStoreProvider.templates.getAll(resources, params, data)\n\nGet all items from the first store loaded.\n\n### ngSimpleStoreProvider.templates.getAllBy(feature, resources, params, data)\n\nGet all items from the first store loaded and filter by a given parameter.\n\n**How it works**: If you pass /api/foo/:id as the url and 'id' as the feature,\nthis function will look for the value corresponding to 'id' in the url param\n(i.e. 1 in /api/foo/1) and then retrieve all objects from your store where\nthe id property of the object is 1\n\n### ngSimpleStoreProvider.templates.getOneBy(feature, resources, params, data)\n\nSame as getAllBy except only the first element in the resulting array is returned,\nand if there are no elements in the resulting array we return 404.\n\n### ngSimpleStoreProvider.templates.create(resources, params, data)\n\nCreate new item in the first store loaded.\n\n### ngSimpleStoreProvider.templates.update(resources, params, data)\n\nUpdate an item in the first store loaded. (return 404 if no item with same ID)\n\n### ngSimpleStoreProvider.templates.delete(resources, params, data)\n\nDelete an item in the first store loaded. (returns 404 if no item with same ID)\n\n## ngSimpleStore\n\nBuild fake backend at runtime\n\n### ngSimpleStoreProvider.setup($httpBackend)\nFor each resource added to the provider, this creates functions that mimic the typical behavior of GET, POST, PUT, and DELETE and attaches them to apiUrl/name with $httpBackend\n\n\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tayste5000/ng-simple-db/issues"
  },
  "homepage": "https://github.com/tayste5000/ng-simple-db#readme",
  "_id": "ng-simpledb@0.2.0",
  "_shasum": "9c9074260c3f122a7939ac60865de9fd48c5cc75",
  "_from": "tayste5000/ng-simple-db",
  "_resolved": "git://github.com/tayste5000/ng-simple-db.git#8f5545f40b8076d3a0a7386507b34fa7401a8ceb"
}
